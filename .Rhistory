install.packages("rJava")
install.packages("rJava")
library(rJava)
runif(1,10,1)
runif(1,1,10)
runif(1,1,10)
runif(1,1,10)
runif(1,1,10)
x = runif(10,1,10)
y=x*10
data=data.frame(y)
data$x=x
l.m=lm(data$y~data$x)
l.m
print(l.m)
a = print(l.m)
a
a[1]
a[2]
a[3]
a[4]
a[5]
a[6]
a[7]
a[8]
a[9]
l.m[1]
predict(l.m, 2)
l.m$coefficients
l.m$model
setwd("~/")
write.csv(data, "rJava.csv", row.names = FALSE)
install.packages("tidyverse")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runif(1,0,1)
source('~/.active-rstudio-document', echo=TRUE)
b
10^10
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
(0.25)^10
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(tidyverse)
source("graph-functions.R")
source("network-functions.R")
library(tidyverse)
source("graph-functions.R")
source("network-functions.R")
setwd("~/Doc/volunteer-computing")
library(tidyverse)
source("graph-functions.R")
source("network-functions.R")
source('~/Doc/traces/17-03-01_00-00-03-graph.R', echo=TRUE)
t <- one_server_total_bandwidth(g)
res <- list()
for(j in 1:length(V(g))){
#Check if the node has any connections
if(degree(g)[j] == 0){next}
paths <- all_shortest_paths(g, j, V(g))$res
min.bw <- c()
last.node <- c()
path.length <- c()
for(i in 1:length(paths)){
if(i == j){next}
path.bw <- E(g, path = paths[[i]])$bw
clean.path <- path.bw[!is.na(path.bw)]
if(length(clean.path) != 0){ #Some paths are empty when cleaned
min.bw[i] <- min(clean.path)
nodes <- paths[[i]]
last.node[i] <- nodes[length(nodes)]
path.length[i] <- length(paths[[i]])
}
}
}
#Check if the node has any connections
if(degree(g)[j] == 0){next}
paths <- all_shortest_paths(g, j, V(g))$res
min.bw <- c()
last.node <- c()
path.length <- c()
#Select the paths with maximum bandwith
for(i in 1:length(paths)){
if(i == j){next}
path.bw <- E(g, path = paths[[i]])$bw
clean.path <- path.bw[!is.na(path.bw)]
if(length(clean.path) != 0){ #Some paths are empty when cleaned
min.bw[i] <- min(clean.path)
nodes <- paths[[i]]
last.node[i] <- nodes[length(nodes)]
path.length[i] <- length(paths[[i]])
}
}
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw, path.length) %>%
group_by(last.node) %>%
summarise(min.bw = max(min.bw)) %>%
filter(!is.na(last.node))
total.bw <- sum(all.paths$min.bw)
total.path.length <- sum(all.paths$path.length)
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw, path.length) %>%
group_by(last.node) %>%
summarise(min.bw = max(min.bw)) %>%
filter(!is.na(last.node))
View(all.paths)
path.length
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, path.length) %>%
group_by(last.node) %>%
summarise(min.bw = max(min.bw)) %>%
filter(!is.na(last.node))
min.bw <- c()
last.node <- c()
path.length <- c()
#Select the paths with maximum bandwith
for(i in 1:length(paths)){
if(i == j){next}
path.bw <- E(g, path = paths[[i]])$bw
clean.path <- path.bw[!is.na(path.bw)]
if(length(clean.path) != 0){ #Some paths are empty when cleaned
min.bw[i] <- min(clean.path)
nodes <- paths[[i]]
last.node[i] <- nodes[length(nodes)]
path.length[i] <- as.numeric(length(paths[[i]]))
}
}
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw,apath.length) %>%
group_by(last.node) %>%
summarise(min.bw = max(min.bw)) %>%
filter(!is.na(last.node))
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw, path.length) %>%
group_by(last.node) %>%
summarise(min.bw = max(min.bw)) %>%
filter(!is.na(last.node))
data.frame(last.node, min.bw, path.length)
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw, path.length) %>%
group_by(last.node)
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw, path.length) %>%
group_by(last.node) %>%
summarise(min.bw = max(min.bw))
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw, path.length) %>%
group_by(last.node) %>%
summarise(min.bw = max(min.bw))
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw, path.length) %>%
group_by(last.node) %>%
summarise(path.length = max(path.length)) %>%
filter(!is.na(last.node))
library(tidyverse)
source("graph-functions.R")
source("network-functions.R")
t <- one_server_total_bandwidth(g)
r <- c()
for(i in 1:10){
source(file_list[i])
t <- one_server_total_bandwidth(g)
d <- degree(g)
r[i] <- summary(lm(t~ d))$r.squared
}
path = "/home/bill/Doc/traces"
file_list <- list.files(path, pattern = ".*\\.R", full.names=TRUE)
#print.plots(file_list)
r <- c()
for(i in 1:10){
source(file_list[i])
t <- one_server_total_bandwidth(g)
d <- degree(g)
r[i] <- summary(lm(t~ d))$r.squared
}
r <- c()
t <- c()
d <- c()
for(i in 1:10){
source(file_list[i])
t[i] <- one_server_total_bandwidth(g)
d[i] <- degree(g)
#r[i] <- summary(lm(t~ d))$r.squared
}
library(tidyverse)
source("graph-functions.R")
source("network-functions.R")
total.p <- one_server_total_bandwidth(g)
rm(d)
d <- degree(g)
plot(d, total.p)
plot(d, unlist(total.p))
unlist(total.p)
d
total.p <- unlist(total.p)
d[d!=0]
plot(d[d!=0], total.p)
d <- d[d!=0]
plot(d, total.p)
rs <- data.frame(d, total.p)
View(rs)
View(rs)
lm(d ~ 1/total.p )
model <- lm(d ~ 1/total.p )
summary(model)
model
summary(model)$r.squared
source(file_list[15])
total.p <- one_server_total_bandwidth(g)
d <- degree(g)
d <- d[d!=0]
total.p <- unlist(total.p)
plot(d, total.p)
library(tidyverse)
source("graph-functions.R")
source("network-functions.R")
source(file_list[15])
total.p <- one_server_total_bandwidth(g)
d <- degree(g)
d <- d[d!=0]
total.p <- unlist(total.p)
plot(d, total.p)
library(tidyverse)
source("graph-functions.R")
source("network-functions.R")
total.bw <- one_server_total_bandwidth(g)
total.bw
#Check if the node has any connections
if(degree(g)[j] == 0){next}
paths <- all_shortest_paths(g, j, V(g))$res
min.bw <- c()
last.node <- c()
path.length <- c()
#Select the paths with maximum bandwith
for(i in 1:length(paths)){
if(i == j){next}
path.bw <- E(g, path = paths[[i]])$bw
clean.path <- path.bw[!is.na(path.bw)]
if(length(clean.path) != 0){ #Some paths are empty when cleaned
min.bw[i] <- min(clean.path)
nodes <- paths[[i]]
last.node[i] <- nodes[length(nodes)]
path.length[i] <- as.numeric(length(paths[[i]]))
}
}
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw) %>%
group_by(last.node) %>%
summarise(path.length = max(min.bw)) %>%
filter(!is.na(last.node))
total.bw<- sum(all.paths$min.bw)
#total.path.length <- sum(all.paths$path.length)
res[j] <- total.bw
res <- list()
for(j in 1:length(V(g))){
#Check if the node has any connections
if(degree(g)[j] == 0){next}
paths <- all_shortest_paths(g, j, V(g))$res
min.bw <- c()
last.node <- c()
path.length <- c()
#Select the paths with maximum bandwith
for(i in 1:length(paths)){
if(i == j){next}
path.bw <- E(g, path = paths[[i]])$bw
clean.path <- path.bw[!is.na(path.bw)]
if(length(clean.path) != 0){ #Some paths are empty when cleaned
min.bw[i] <- min(clean.path)
nodes <- paths[[i]]
last.node[i] <- nodes[length(nodes)]
path.length[i] <- as.numeric(length(paths[[i]]))
}
}
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw) %>%
group_by(last.node) %>%
summarise(path.length = max(min.bw)) %>%
filter(!is.na(last.node))
total.bw<- sum(all.paths$min.bw)
#total.path.length <- sum(all.paths$path.length)
res[j] <- total.bw
}
data.frame(last.node, min.bw)
all.paths <- data.frame(last.node, min.bw) %>%
group_by(last.node)
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw) %>%
group_by(last.node) %>%
summarise(path.length = max(min.bw))
View(all.paths)
View(all.paths)
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw) %>%
group_by(last.node) %>%
summarise(path.length = max(min.bw)) %>%
filter(!is.na(last.node))
sum(all.paths$min.bw)
all.paths <- data.frame()
res <- list()
for(j in 1:length(V(g))){
#Check if the node has any connections
if(degree(g)[j] == 0){next}
paths <- all_shortest_paths(g, j, V(g))$res
min.bw <- c()
last.node <- c()
path.length <- c()
#Select the paths with maximum bandwith
for(i in 1:length(paths)){
if(i == j){next}
path.bw <- E(g, path = paths[[i]])$bw
clean.path <- path.bw[!is.na(path.bw)]
if(length(clean.path) != 0){ #Some paths are empty when cleaned
min.bw[i] <- min(clean.path)
nodes <- paths[[i]]
last.node[i] <- nodes[length(nodes)]
path.length[i] <- as.numeric(length(paths[[i]]))
}
}
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw) %>%
group_by(last.node) %>%
summarise(path.length = max(min.bw)) %>%
filter(!is.na(last.node))
total.bw<- sum(all.paths$min.bw)
#total.path.length <- sum(all.paths$path.length)
res[j] <- total.bw
}
res <- list()
for(j in 1:length(V(g))){
#Check if the node has any connections
if(degree(g)[j] == 0){next}
paths <- all_shortest_paths(g, j, V(g))$res
min.bw <- c()
last.node <- c()
path.length <- c()
#Select the paths with maximum bandwith
for(i in 1:length(paths)){
if(i == j){next}
path.bw <- E(g, path = paths[[i]])$bw
clean.path <- path.bw[!is.na(path.bw)]
if(length(clean.path) != 0){ #Some paths are empty when cleaned
min.bw[i] <- min(clean.path)
nodes <- paths[[i]]
last.node[i] <- nodes[length(nodes)]
path.length[i] <- as.numeric(length(paths[[i]]))
}
}
#Get the path with the best bandwidth
all.paths <- data.frame(last.node, min.bw) %>%
group_by(last.node) %>%
summarise(min.bw = max(min.bw)) %>%
filter(!is.na(last.node))
total.bw<- sum(all.paths$min.bw)
#total.path.length <- sum(all.paths$path.length)
res[j] <- total.bw
}
library(tidyverse)
source("graph-functions.R")
source("network-functions.R")
total.bw <- one_server_total_bandwidth(g)
library(tidyverse)
source("graph-functions.R")
source("network-functions.R")
total.bw <- one_server_total_bandwidth(g)
plot(total.bw, total.p)
total.bw
total.bw <- total.bw[!is.na(total.bw)]
plot(total.bw, total.p)
plot(total.p, total.bw)
degree(g)
which(degree(g)==0)
source('~/Doc/traces/17-03-01_00-00-03-graph.R', echo=TRUE)
Sys.info()
total.bw <- one_server_total_bandwidth(g)
which(max(total.bw))
total.bw[(max(total.bw))]
which.is.max(total.bw)
which.max(total.bw)
